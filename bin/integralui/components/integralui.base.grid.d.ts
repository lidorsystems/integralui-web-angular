import { ChangeDetectorRef, ComponentFactoryResolver, ElementRef, EventEmitter, Renderer } from '@angular/core';
import { IntegralUIBaseComponent, IntegralUIDragDropDisplayMode, IntegralUIEditorType, IntegralUIMoveDirection, IntegralUISelectionMode, IntegralUISortOrder, IntegralUISpeedMode } from './integralui.core';
import { IntegralUICommonService } from '../services/integralui.common.service';
import { IntegralUIDataService } from '../services/integralui.data.service';
import { IntegralUIDragDropService } from '../services/integralui.dragdrop.service';
import { IntegralUIFilterService } from '../services/integralui.filter.service';
export declare enum IntegralUIGridLines {
    None = 0,
    Horizontal = 1,
    Vertical = 2,
    Both = 3
}
export declare class IntegralUIBaseGrid extends IntegralUIBaseComponent {
    protected dataService: IntegralUIDataService;
    protected dragDropService: IntegralUIDragDropService;
    protected elemRef: ElementRef;
    protected elemRenderer: Renderer;
    protected commonService?: IntegralUICommonService;
    protected filterService?: IntegralUIFilterService;
    protected changeRef?: ChangeDetectorRef;
    protected cmpResolver?: ComponentFactoryResolver;
    animateColumnSize: any;
    animateRowSize: any;
    protected prevClickedObj: any;
    protected currentColumnList: Array<any>;
    protected currentLeftColumnList: Array<any>;
    protected currentRightColumnList: Array<any>;
    protected currentRowList: Array<any>;
    private dataColumns;
    private dataRows;
    protected options: any;
    scrollColumnList: Array<any>;
    scrollLeftColumnList: Array<any>;
    scrollRightColumnList: Array<any>;
    scrollRowList: Array<any>;
    scrollLeftRowList: Array<any>;
    scrollRightRowList: Array<any>;
    protected columnList: Array<any>;
    protected rowList: Array<any>;
    protected columnDataKey: string;
    protected rowDataKey: string;
    private dropMarkElem;
    private dragCmpRef;
    private dragCmp;
    private cloneElem;
    private cloneElemStartPos;
    protected isCtrlDragEntered: boolean;
    protected isFirstDragEnter: boolean;
    isDragHandleVisible: boolean;
    dragRowList: Array<any>;
    protected targetDropRow: any;
    protected targetDropPos: number;
    protected prevTargetDropPos: number;
    dragHandlePos: any;
    protected dragHandleShiftPos: any;
    dragObjIndent: number;
    protected isDragActive: boolean;
    protected dragStartPos: any;
    protected dragEndPos: any;
    private dropListRef;
    private dropList;
    private calendarRef;
    private calendar;
    private currentEditorCell;
    protected isPopupDelayed: boolean;
    isEditorFocused: boolean;
    protected originalEditorText: string;
    protected originalEditorValue: any;
    protected currentExpandColumnID: any;
    protected expandColIndex: number;
    protected hoverCell: any;
    protected hoverColumn: any;
    hoverRow: any;
    protected isGridHovered: boolean;
    protected currentIndex: number;
    protected prevIndex: number;
    protected tabIndexCount: number;
    ctrlCursor: string;
    blockHoverRect: any;
    hoverRowObj: any;
    protected columnStartPos: {
        x: number;
        y: number;
    };
    protected resizeColumn: any;
    protected resizeColumnIndex: number;
    protected reorderColumn: any;
    protected columnReorderActive: boolean;
    protected currentFocusCell: any;
    protected isKeyboardActive: boolean;
    protected allowUpdate: boolean;
    protected avgRowHeight: number;
    blockMarginTop: number;
    blockSize: any;
    leftBlockSize: any;
    rightBlockSize: any;
    protected columnPadding: any;
    protected currentGridLines: IntegralUIGridLines;
    protected currentHeaderHeight: number;
    protected currentFooterHeight: number;
    protected isExpandBoxVisible: boolean;
    protected isLayoutUpdating: boolean;
    viewIndexRange: any;
    fixedLeftViewIndexRange: number;
    fixedRightViewIndexRange: number;
    visibleRange: number;
    protected isAutoSizeColumnsActive: boolean;
    protected isHeaderVisible: boolean;
    protected isFooterVisible: boolean;
    isUpdateActive: boolean;
    protected scrollSize: {
        width: number;
        height: number;
    };
    contentLeftPos: number;
    protected initialContentLeftPos: number;
    protected allColWidth: number;
    horScrollElemPos: any;
    cornerScrollElemPos: any;
    paginatorPos: any;
    protected currentPageNumber: number;
    protected onlyCurrentPage: boolean;
    protected currentPageList: Array<any>;
    protected pageNumber: number;
    protected pageList: Array<any>;
    protected pageRowCount: number;
    paginatorHeight: number;
    protected originalScrollColumnList: Array<any>;
    protected reorderColumnObj: any;
    protected reorderColumnObjPos: any;
    protected reorderColumnStartPos: any;
    protected reorderColumnCurrentPos: any;
    protected reorderColIndex: number;
    protected reorderNewColIndex: number;
    protected startColumnReorder: boolean;
    protected isColumnResizing: boolean;
    currentScrollPos: {
        x: number;
        y: number;
    };
    protected isKeyPressed: boolean;
    maxScrollPos: {
        x: number;
        y: number;
    };
    private accelerator;
    private scrollTimerID;
    protected isScrollTimerActive: boolean;
    private scrollCount;
    protected isScrollActive: boolean;
    protected prevScrollPos: {
        x: number;
        y: number;
    };
    scrollBarSize: {
        width: number;
        height: number;
    };
    scrollLargeChange: {
        x: number;
        y: number;
    };
    protected currentSelectedColumn: any;
    protected currentSelectedRow: any;
    protected currentSelectionMode: IntegralUISelectionMode;
    private shiftFirstSelectedRow;
    private removeIndex;
    protected currentSelectedRows: Array<any>;
    protected isExpandBoxTouched: boolean;
    protected touchStartPos: any;
    protected touchEndPos: any;
    appRef: any;
    autoUpdate: boolean;
    allowColumnReorder: boolean;
    allowDrag: boolean;
    allowDrop: boolean;
    allowFilter: boolean;
    allowFocus: boolean;
    autoSizeColumns: boolean;
    columns: Array<any>;
    dataFields: any;
    focusedCell: any;
    footerHeight: number;
    gridLines: IntegralUIGridLines;
    headerHeight: number;
    mouseWheelSpeed: IntegralUISpeedMode;
    paging: any;
    rowHeight: number;
    rows: Array<any>;
    selectedColumn: any;
    selectedRow: any;
    selectionMode: IntegralUISelectionMode;
    showExpandBox: boolean;
    showHoverRow: boolean;
    showScroll: any;
    sorting: IntegralUISortOrder;
    afterSelect: EventEmitter<any>;
    beforeEdit: EventEmitter<any>;
    beforeSelect: EventEmitter<any>;
    beforeUpdate: EventEmitter<any>;
    cellClick: EventEmitter<any>;
    cellDblClick: EventEmitter<any>;
    cellHover: EventEmitter<any>;
    cellRightClick: EventEmitter<any>;
    cellValueChanging: EventEmitter<any>;
    cellValueChanged: EventEmitter<any>;
    change: EventEmitter<any>;
    columnAdding: EventEmitter<any>;
    columnAdded: EventEmitter<any>;
    columnClick: EventEmitter<any>;
    columnDblClick: EventEmitter<any>;
    columnHover: EventEmitter<any>;
    columnRightClick: EventEmitter<any>;
    columnOrderChanged: EventEmitter<any>;
    columnRemoving: EventEmitter<any>;
    columnRemoved: EventEmitter<any>;
    columnsCleared: EventEmitter<any>;
    columnSizeChanged: EventEmitter<any>;
    dragEnd: EventEmitter<any>;
    dragEnter: EventEmitter<any>;
    dragDrop: EventEmitter<any>;
    dragDropComplete: EventEmitter<any>;
    dragLeave: EventEmitter<any>;
    dragOver: EventEmitter<any>;
    dragStart: EventEmitter<any>;
    keyDown: EventEmitter<any>;
    keyPress: EventEmitter<any>;
    keyUp: EventEmitter<any>;
    pageChanged: EventEmitter<any>;
    rowAdding: EventEmitter<any>;
    rowAdded: EventEmitter<any>;
    rowClick: EventEmitter<any>;
    rowDblClick: EventEmitter<any>;
    rowHover: EventEmitter<any>;
    rowRemoving: EventEmitter<any>;
    rowRemoved: EventEmitter<any>;
    rowRightClick: EventEmitter<any>;
    rowsCleared: EventEmitter<any>;
    loadComplete: EventEmitter<any>;
    scrollPosChanged: EventEmitter<any>;
    selectionChanged: EventEmitter<any>;
    updateComplete: EventEmitter<any>;
    constructor(dataService: IntegralUIDataService, dragDropService: IntegralUIDragDropService, elemRef: ElementRef, elemRenderer: Renderer, commonService?: IntegralUICommonService, filterService?: IntegralUIFilterService, changeRef?: ChangeDetectorRef, cmpResolver?: ComponentFactoryResolver);
    ngOnInit(): void;
    addColumn(column: any): void;
    clearColumns(): void;
    insertColumnAt(column: any, index: number): void;
    insertColumnBefore(column: any, refColumn: any): void;
    insertColumnAfter(column: any, refColumn: any): void;
    removeColumn(column: any): boolean;
    removeColumnAt(index: number): boolean;
    protected callEventAddColumn(type: string, column: any, index?: number, refColumn?: any, flag?: boolean): void;
    protected callEventRemoveColumn(column: any, index?: number): boolean;
    addRow(row: any, parent?: any): void;
    clearRows(parent?: any): void;
    insertRowAt(row: any, index: number, parent?: any): void;
    insertRowBefore(row: any, refRow: any): void;
    insertRowAfter(row: any, refRow: any): void;
    removeRow(row: any): boolean;
    removeRowAt(index: number, parent?: any): boolean;
    protected callEventAddRow(type: string, row: any, index?: number, parent?: any, refRow?: any, flag?: boolean): void;
    protected callEventRemoveRow(row: any, index?: number, parent?: any): boolean;
    cellClickEvent(e: any, obj: any): void;
    cellDblClickEvent(e: any, obj: any): void;
    cellRightClickEvent(e: any, obj: any): void;
    columnClickEvent(e: any, obj: any): void;
    columnDblClickEvent(e: any, obj: any): void;
    columnRightClickEvent(e: any, obj: any): void;
    rowClickEvent(e: any, obj: any): void;
    rowDblClickEvent(e: any, obj: any): void;
    rowRightClickEvent(e: any, obj: any): void;
    protected updateData(): void;
    protected updateDataFields(data?: any): void;
    protected updateOptions(value?: any): void;
    protected updateColumnFields(fields?: any): void;
    protected updateRowFields(fields?: any): void;
    protected updateCellFields(fields?: any): void;
    protected updateShowScroll(value?: any): void;
    protected processLoadData(data: Array<any>, parent?: any, fields?: any, flat?: boolean): void;
    protected createScrollRowList(): void;
    protected createScrollNormalRowList(): void;
    protected createScrollLeftRowList(): void;
    protected createScrollRightRowList(): void;
    protected createEmptyRowObj(): {
        clickPos: {
            x: number;
            y: number;
        };
        cells: any[];
        data: {};
        draggable: boolean;
        indent: number;
        inlineStyle: {};
        isEmpty: boolean;
        isGroup: boolean;
        style: {};
    };
    protected createEmptyCellObj(): any;
    protected updateScrollRowListLimit(limit: number): void;
    protected updateScrollNormalRowListLimit(limit: number): void;
    protected updateScrollLeftRowListLimit(limit: number): void;
    protected updateScrollRightRowListLimit(limit: number): void;
    protected getNumScrollColumns(fixed?: string): any;
    protected resetRowObj(obj: any): void;
    protected resetCellObj(obj: any): void;
    protected updateScrollColumnList(): void;
    protected updateScrollRowList(flag?: boolean): void;
    protected addDropMark(pos: any): void;
    removeDropMark(): void;
    protected callDragDropEvent(e: any, data: any, flag?: boolean): {
        action: any;
        cancel: boolean;
        dragRow: any;
        dropPos: any;
        event: any;
        isDropAllowed: any;
        mousePos: {
            x: any;
            y: any;
        };
        resume: () => void;
        sourceCtrl: any;
        targetCtrl: any;
        targetRow: any;
    };
    private checkEmptySpace;
    ctrlDragEnter(e: any): void;
    ctrlDragDrop(e: any): void;
    ctrlDragLeave(e: any): void;
    ctrlDragOver(e: any): void;
    ctrlDragEnd(e: any): void;
    protected removeDragHandle(): void;
    protected dropMark(e: any, flag?: boolean): void;
    protected updateDragComponent(value: any): void;
    protected isDragAllowed(row: any): boolean;
    protected isDropAllowed(sourceData: any, targetRow: any, dropPos: number): any;
    protected processDragStart(e: any, row: any): void;
    protected processDragStartHandle(e: any, row: any): void;
    protected processDragStartPopup(e: any, row: any): void;
    protected processDragEnter(e: any): void;
    protected processDragLeave(e: any): void;
    protected processDragOver(e: any, rowObj?: any, rowBounds?: any, flag?: boolean, type?: string): void;
    protected processDragOverHandle(e: any, rowObj?: any, rowBounds?: any, flag?: boolean, type?: string): void;
    protected processDragOverPopup(e: any, rowObj?: any, rowBounds?: any, flag?: boolean, type?: string): void;
    protected processDragDrop(e: any, rowObj?: any): void;
    protected clearDragDropSettings(): void;
    protected drop(e: any, data: any): void;
    protected processDataDrop(e: any, row: any, data: any): void;
    protected callAfterSelectEvent(obj: any): void;
    rowDragEnd(e: any, obj: any): void;
    protected dragGhost: any;
    dragMode: IntegralUIDragDropDisplayMode;
    protected emptyRowObj: any;
    protected getEmptyObj(status: number): any;
    protected removeEmptyRow(status: number): void;
    protected updateDragHandlePos(e: any): void;
    protected updateScrollRowListDragOver(row: any): void;
    protected addCalendar(): void;
    protected addDropList(): void;
    protected callCellValueChanging(obj: any, value?: any): boolean;
    protected callCellValueChanged(obj: any): void;
    closeEditor(): void;
    editCheckBoxValue(obj: any): void;
    editorClick(e: any): void;
    editorDblClickEvent(e: any): void;
    editorKeyDown(e: any, type?: string): void;
    editorLostFocus(type?: string): void;
    editorMouseDown(e: any, obj: any): void;
    editorMouseWheel(e: any): void;
    editorNumericValueChange(obj: any, value: any): void;
    editorPreventDragStart(e: any): void;
    editorValueChanged(e: any, obj: any): void;
    protected getCellEditorClass(obj: any): string;
    getCellEditorList(column: any): any;
    getCellEditorSettings(column: any): any;
    getCellEditorStyle(obj: any): any;
    getCellEditorType(column: any): any;
    getCellEditorVisibility(column: any, cell: any): boolean;
    getCellField(key: string): any;
    getCellText(obj: any): any;
    getCellValue(obj: any): any;
    protected findItemByValue(value: any, list: Array<any>): string;
    getEditorProgressStyle(obj: any): any;
    getEditorProgressValue(obj: any): number;
    getHoverRow(): any;
    protected hideCalendar(): void;
    protected hideDropList(): void;
    isCellEditorEnabled(column: any, cell: any): boolean;
    protected isEditorPresent(type: IntegralUIEditorType): boolean;
    openEditor(e: any, obj: any, type?: string): void;
    protected removeCalendar(): void;
    protected removeDropList(): void;
    protected showPopup(e: any, obj: any, rowElem: any, colElem: any): void;
    selectTextBoxContent(e: any): void;
    expandBoxMouseDown(e: any, row: any): void;
    expandBoxMouseUp(e: any): void;
    expandBoxTouchStart(e: any, row: any): void;
    toggle(row?: any, value?: boolean): void;
    protected updateExpandingCell(row: any, value: boolean): void;
    protected convertToCSV(list: Array<any>): string;
    exportToCSV(): string;
    exportToJSON(columnFields?: any, rowFields?: any, spacing?: any, flat?: boolean): string;
    protected exportColumnsToJSON(fields?: any, spacing?: any): string;
    protected exportRowsToJSON(fields?: any, spacing?: any, flat?: boolean): string;
    filter(column: any, params?: any): void;
    protected changeCursor(flag?: boolean): void;
    checkStatus(type?: string): boolean;
    clearHoverRow(row?: any): void;
    cloneRow(row: any): any;
    protected createCloneList(list: Array<any>): any[];
    getCellByColumnId(list: Array<any>, id: any): any;
    protected getCellWidth(rowObj: any, column: any): number;
    protected getColumnAllowResize(column: any): {
        left: any;
        right: any;
    };
    getColumnById(id: any): any;
    protected getColumnCurrentIndex(column: any): number;
    protected getColumnIndexFromList(column: any): number;
    protected getColumnList(fixed?: string): any[];
    protected getColumnIndex(column: any): any;
    protected getColumnRealIndex(j: number): any;
    protected getPrevColumnIndex(column: any): number;
    protected getNextColumnIndex(column: any): number;
    protected getLastColumnIndex(): number;
    getColumnWidth(column: any, type?: string): number;
    setColumnWidth(column: any, width: number): void;
    protected getPrevColumn(column: any, flag?: boolean): any;
    protected getExpandingColumn(): any;
    updateExpandingColumnID(): void;
    protected getFilterTree(column: any): any;
    private getCurrentList;
    getList(key?: string, parent?: any): Array<any>;
    getFullList(): Array<any>;
    getTopRow(): any;
    protected getObjFromRow(row: any): any;
    protected createScrollObjFromRow(row: any, rowObj?: any, scrollIndex?: number): any;
    protected getObjIndexFromScrollList(row: any, fixed?: string): number;
    protected getObjFromScrollList(row: any, fixed?: string): any;
    protected getRowCurrentIndex(row: any): number;
    protected getRowIndent(rowObj: any, column: any): number;
    getRowLevel(row: any): number;
    protected getRowList(fixed?: string): any[];
    getRowFromComponent(cmp: any): any;
    protected isChildOf(targetRow: any, row: any): boolean;
    protected isColumnFixed(column: any, fixed?: string): boolean;
    protected isColumnVisible(column: any): boolean;
    protected isColumnWidthFixed(column: any): boolean;
    protected isComponentIndexInRange(index: number): boolean;
    protected isExpandBoxAllowed(column: any): boolean;
    protected isIndexInRange(index: number, list: Array<any>): boolean;
    protected isRowAllowed(row: any, flag?: boolean): boolean;
    protected filterIsThereChildren(row: any, flag?: boolean): boolean;
    protected isRowEnabled(row: any): boolean;
    protected isRowFixed(row: any): boolean;
    protected isRowHovered(row: any): boolean;
    protected isRowSelected(row: any): boolean;
    protected isParentOf(targetRow: any, row: any): boolean;
    isThereFixedColumns(fixed: string): boolean;
    processStateChanged(): void;
    updateExpandStatus(): void;
    protected resetHoverRowObj(): void;
    moveColumn(column: any, direction: IntegralUIMoveDirection, targetColumn?: any, position?: number): void;
    paginatorMouseEnter(e: any): void;
    scrollMouseEnter(e: any): void;
    cellGotFocus(cell: any): void;
    cellLostFocus(cell: any): void;
    onContentScroll(e: any): void;
    onGridScroll(e: any): void;
    cellMouseEnter(e: any, obj: any): void;
    cellMouseLeave(e: any): void;
    cellMouseDown(e: any, obj: any): void;
    cellMouseUp(e: any, obj: any, i: number, j: number): void;
    cellTouchEnd(e: any, obj: any, i: number, j: number): void;
    protected openDropDown(e: any, obj: any, i: number, j: number): void;
    cellKeyDown(e: any, cell: any): void;
    cellKeyPress(e: any, cell: any): void;
    cellKeyUp(e: any, cell: any): void;
    isCellFocused(obj: any): boolean;
    processDownArrowKey(cell: any, e?: any): any;
    processEndKey(cell: any, e?: any): any;
    processHomeKey(cell: any, e?: any): any;
    processLeftArrowKey(cell: any): any;
    processPageDownKey(cell: any, e?: any): any;
    processPageUpKey(cell: any, e?: any): any;
    processRightArrowKey(cell: any): any;
    processUpArrowKey(cell: any, e?: any): any;
    protected getDownCell(cell: any): any;
    protected getNextCell(cell: any): any;
    private getLastScrollIndex;
    protected getPrevCell(cell: any): any;
    protected getUpCell(cell: any): any;
    protected isFirstCell(cell: any): boolean;
    protected isFirstRow(cell: any): boolean;
    protected isLastCell(cell: any): boolean;
    protected isLastRow(cell: any): boolean;
    protected getRowFromCell(cell: any): any;
    moveFocusFromCell(cell: any, direction: string): any;
    getObjFromCell(cell: any): any;
    protected updateFocusCell(obj: any): void;
    onWindowKeyDown(e: any): void;
    onWindowKeyUp(e: any): void;
    protected getContentSize(): {
        width: number;
        height: number;
    };
    refresh(obj?: any): void;
    suspendLayout(): void;
    resumeLayout(): void;
    protected updateCurrentLayout(): void;
    updateLayout(): void;
    protected updateColumnWidth(): void;
    private updateColumnWidthByFactor;
    protected checkWidthChanges(): void;
    protected updateCellWidth(column: any): void;
    protected updateRange(): void;
    getBlockBottomPos(): number;
    getBlockRightPos(): 0 | 16;
    protected onCtrlMouseEnter(e: any): void;
    protected onCtrlMouseLeave(e: any): void;
    currentPage(value?: number): number;
    getMaxPages(): number;
    firstPage(): void;
    lastPage(): void;
    nextPage(): void;
    prevPage(): void;
    protected resetPageNumber(): void;
    protected updatePageNumber(): void;
    private updatePaging;
    paginatorPageChanged(e: any): void;
    isPaginationEnabled(): any;
    getColumnOpacity(obj: any): 1 | 0;
    protected updateOrignalScrollColumnList(): void;
    protected updateReorderColumnPos(): void;
    protected getHeaderRect(): {
        top: number;
        right: number;
        bottom: number;
        left: number;
        height: number;
        width: number;
        x: number;
        y: number;
    };
    protected resetReorderColumnSettings(): void;
    protected restoreColumnOrder(): void;
    protected getColumnIndexFromScrollList(column: any): number;
    protected moveObject(from: number, to: number, list: Array<any>): void;
    scrollPos(value?: any): any;
    protected changeHorizontalScrollPos(value: number): void;
    protected changeVerticalScrollPos(value: number): void;
    gridMouseWheel(e: any): void;
    isVerScrollVisible(): boolean;
    isHorScrollVisible(): boolean;
    onVerticalScrollStart(e: any): void;
    onVerticalScrollEnd(e: any): void;
    onVerticalScrollChanged(e: any): void;
    onHorizontalScrollStart(e: any): void;
    onHorizontalScrollEnd(e: any): void;
    onHorizontalScrollChanged(e: any): void;
    updateView(flag?: boolean): void;
    protected processScroll(e: any, extraTopSpace?: number, extraBottomSpace?: number): void;
    private startScrollTimer;
    private stopScrollTimer;
    private scrollTimerElapsed;
    scrollTo(row: any): void;
    findRowById(id: any): any;
    findRowByText(text: string): any;
    clearSelection(): void;
    protected processColumnSelection(e: any, column: any, value?: any): any;
    protected clearComponentSelection(): void;
    private clearPrevSelection;
    private isRowInSelectionList;
    protected processRowSelection(e: any, row: any, value?: any): any;
    selectRows(rows: Array<any>): void;
    protected updateRowSelection(e: any, row: any): void;
    protected sortColumn: any;
    protected sortComparer: any;
    sort(column: any, order: IntegralUISortOrder, comparer?: any): void;
    protected getCellIndexInCollection(cells: Array<any>, colIndex: number, colId: any): number;
    isSortingAllowed(): boolean;
    isSortingColumn(column: any): boolean;
    protected applySorting(list: Array<any>): void;
    protected getColumnInlineStyle(value: any): any;
    protected getRowInlineStyle(value: any, hide?: boolean): any;
    columnTouchStart(e: any, obj: any): void;
    rowTouchStart(e: any, obj: any): void;
    ctrlTouchStart(e: any): void;
    ctrlTouchEnd(e: any): void;
}
