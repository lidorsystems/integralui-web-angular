import { ComponentFactoryResolver, ElementRef, QueryList, Renderer2, ViewContainerRef } from '@angular/core';
import { IntegralUIBaseService, IntegralUITemplate } from './integralui.core';
import { IntegralUICommonService } from '../services/integralui.common.service';
import { IntegralUIDataService } from '../services/integralui.data.service';
import { IntegralUIDragDropService } from '../services/integralui.dragdrop.service';
import { IntegralUIFilterService } from '../services/integralui.filter.service';
import { IntegralUIBaseList } from './integralui.base.list';
import { IntegralUIListItem } from './integralui.listitem';
import * as i0 from "@angular/core";
export declare class IntegralUIListBox extends IntegralUIBaseList {
    protected dataService: IntegralUIDataService;
    protected dragDropService: IntegralUIDragDropService;
    protected elemRef: ElementRef;
    protected elemRenderer: Renderer2;
    protected commonService?: IntegralUICommonService;
    protected filterService?: IntegralUIFilterService;
    protected cmpResolver?: ComponentFactoryResolver;
    protected baseService?: IntegralUIBaseService;
    contentList: QueryList<IntegralUIListItem>;
    contentRef: ViewContainerRef;
    contentElem: ElementRef;
    itemElems: QueryList<ElementRef>;
    itemTemplate: any;
    templates: QueryList<IntegralUITemplate>;
    private tRef;
    constructor(dataService: IntegralUIDataService, dragDropService: IntegralUIDragDropService, elemRef: ElementRef, elemRenderer: Renderer2, commonService?: IntegralUICommonService, filterService?: IntegralUIFilterService, cmpResolver?: ComponentFactoryResolver, baseService?: IntegralUIBaseService);
    ngOnInit(): void;
    protected updateData(): void;
    ngAfterViewInit(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    ngAfterContentChecked(): void;
    addItem(item: any): void;
    clearItems(): void;
    insertItemAt(item: any, index: number): void;
    removeItemAt(index: number): boolean;
    private addItemToCurrentList;
    loadData(data: Array<any>, fields?: any): void;
    protected updateCurrentList(): void;
    protected updateScrollItemList(): void;
    protected getItemElemList(): ElementRef<any>[];
    getItemFromComponent(cmp: IntegralUIListItem): any;
    protected updateItemList(): void;
    invokeEvent(key: string, item: any): boolean;
    protected updateBlockSize(): void;
    protected getContentSize(): {
        width: any;
        height: any;
    };
    updateLayout(): void;
    getControlStyle(): any;
    private resetRefresh;
    refresh(obj?: any): void;
    static ɵfac: i0.ɵɵFactoryDef<IntegralUIListBox, never>;
    static ɵcmp: i0.ɵɵComponentDefWithMeta<IntegralUIListBox, "iui-listbox", never, { "allowDrag": "allowDrag"; "allowDrop": "allowDrop"; "allowFilter": "allowFilter"; "allowFocus": "allowFocus"; "appRef": "appRef"; "controlStyle": "controlStyle"; "data": "data"; "enabled": "enabled"; "items": "items"; "name": "name"; "selectedItem": "selectedItem"; "selectionMode": "selectionMode"; "sorting": "sorting"; "state": "state"; "virtualMode": "virtualMode"; }, { "afterSelect": "afterSelect"; "beforeEdit": "beforeEdit"; "beforeSelect": "beforeSelect"; "change": "change"; "clear": "clear"; "dragEnter": "dragEnter"; "dragDrop": "dragDrop"; "dragDropComplete": "dragDropComplete"; "dragLeave": "dragLeave"; "dragOver": "dragOver"; "itemAdding": "itemAdding"; "itemAdded": "itemAdded"; "itemHover": "itemHover"; "itemRemoving": "itemRemoving"; "itemRemoved": "itemRemoved"; "keyDown": "keyDown"; "keyPress": "keyPress"; "keyUp": "keyUp"; "loadComplete": "loadComplete"; "scrollPosChanged": "scrollPosChanged"; "selectionChanged": "selectionChanged"; "updateComplete": "updateComplete"; }, ["itemTemplate", "contentList", "templates"], ["*"]>;
}
