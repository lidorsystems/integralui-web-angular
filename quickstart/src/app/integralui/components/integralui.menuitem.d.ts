import { ElementRef, QueryList } from '@angular/core';
import { IntegralUIBaseService, IntegralUIItem } from './integralui.core';
import { IntegralUICommonService } from '../services/integralui.common.service';
import { IntegralUIDataService } from '../services/integralui.data.service';
import * as i0 from "@angular/core";
export declare class IntegralUIMenuItem extends IntegralUIItem {
    private dataService;
    protected elemRef: ElementRef;
    protected commonService?: IntegralUICommonService;
    protected baseService?: IntegralUIBaseService;
    private contentAnimation;
    private eventList;
    private itemList;
    private expandState;
    private isExpanded;
    private isItemHovered;
    blockPos: {
        top: number;
        left: number;
    };
    private popupOrder;
    blockDisplay: string;
    blockElemWidth: string;
    blockElemHeight: string;
    blockOverflow: string;
    blockOpacity: number;
    private pauseTimer;
    blockElem: ElementRef;
    contentElem: ElementRef;
    contentList: QueryList<IntegralUIMenuItem>;
    protected parentCtrl: any;
    protected parentItem: IntegralUIMenuItem;
    protected blockClassName: string;
    protected expandBoxClassName: string;
    protected expandBoxSpaceClassName: string;
    protected separatorClassName: string;
    iconUrl: string;
    items: Array<any>;
    level: number;
    orientation: string;
    pause: number;
    showAnimation: boolean;
    templateRef: any;
    set expanded(value: boolean);
    get expanded(): boolean;
    constructor(dataService: IntegralUIDataService, elemRef: ElementRef, commonService?: IntegralUICommonService, baseService?: IntegralUIBaseService);
    ngOnInit(): void;
    protected initStyle(): void;
    ngOnDestroy(): void;
    ngAfterContentInit(): void;
    collapse(): void;
    expand(): void;
    toggle(): void;
    onExpandBoxMouseDown(e: any): void;
    getDataType(): any;
    getItemLevel(): number;
    isThereChildren(): boolean;
    isBlockVisible(): boolean;
    updateLayout(): void;
    onMouseEnter(e: any): void;
    onMouseLeave(e: any): void;
    onMouseUp(e: any): void;
    onContextMenu(e: any): void;
    onChildItemMouseDown(e: any): void;
    private removePauseTimer;
    private toggleContent;
    getControlStyle(): any;
    getItemDisplay(): string;
    protected updateControlClass(): void;
    protected getExpandBoxSpaceClass(): string;
    protected getSeparatorClass(): any;
    protected getBlockClass(): string;
    protected getGeneralClass(): string;
    protected getExpandBoxClass(): string;
    protected getExpandBoxStyle(value: any): any;
    protected updateStyle(value: any): void;
    static ɵfac: i0.ɵɵFactoryDef<IntegralUIMenuItem, never>;
    static ɵcmp: i0.ɵɵComponentDefWithMeta<IntegralUIMenuItem, "iui-menuitem", never, { "controlStyle": "controlStyle"; "data": "data"; "enabled": "enabled"; "icon": "icon"; "name": "name"; "state": "state"; "text": "text"; "iconUrl": "iconUrl"; "items": "items"; "level": "level"; "orientation": "orientation"; "pause": "pause"; "showAnimation": "showAnimation"; "templateRef": "templateRef"; "expanded": "expanded"; }, { "click": "click"; "mouseDown": "mouseDown"; "mouseEnter": "mouseEnter"; "mouseLeave": "mouseLeave"; "mouseMove": "mouseMove"; "mouseUp": "mouseUp"; }, ["contentList"], never>;
}
