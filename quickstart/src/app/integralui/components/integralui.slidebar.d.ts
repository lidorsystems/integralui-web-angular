import { ComponentFactoryResolver, ElementRef, EventEmitter, QueryList, ViewContainerRef } from '@angular/core';
import { IntegralUISpeedMode, IntegralUIBaseComponent } from './integralui.core';
import { IntegralUICommonService } from '../services/integralui.common.service';
import { IntegralUIDataService } from '../services/integralui.data.service';
import * as i0 from "@angular/core";
export declare class IntegralUISlide {
    private elemRef;
    constructor(elemRef: ElementRef);
    size(): {
        width: number;
        height: number;
    };
    cloneElem(): any;
    static ɵfac: i0.ɵɵFactoryDef<IntegralUISlide, never>;
    static ɵcmp: i0.ɵɵComponentDefWithMeta<IntegralUISlide, "iui-slide", never, {}, {}, never, ["*"]>;
}
export declare class IntegralUISlideBar extends IntegralUIBaseComponent {
    protected dataService: IntegralUIDataService;
    protected elemRef: ElementRef;
    protected commonService?: IntegralUICommonService;
    protected cmpResolver?: ComponentFactoryResolver;
    controlRef: ViewContainerRef;
    blockRef: ViewContainerRef;
    private animationTimeout;
    private animationTimer;
    buttons: Array<any>;
    arrowTopPos: number;
    arrowDisplay: string;
    private numSlides;
    private cloneAdded;
    private cloneElem;
    private slideList;
    contentSlideList: QueryList<IntegralUISlide>;
    blockElem: ElementRef;
    arrowElem: ElementRef;
    blockMargin: number;
    elemSize: any;
    blockSize: any;
    private slideSize;
    private currentSelection;
    private currentSelectedIndex;
    private selectedSlideComponent;
    private removeIndex;
    private tRef;
    allowAnimation: boolean;
    animationPause: number;
    animationSpeed: IntegralUISpeedMode;
    navigationButtons: boolean;
    slides: Array<any>;
    set selectedIndex(value: number);
    get selectedIndex(): number;
    set selectedSlide(value: any);
    get selectedSlide(): any;
    clear: EventEmitter<any>;
    slideAdding: EventEmitter<any>;
    slideAdded: EventEmitter<any>;
    slideChanged: EventEmitter<any>;
    slideRemoving: EventEmitter<any>;
    slideRemoved: EventEmitter<any>;
    constructor(dataService: IntegralUIDataService, elemRef: ElementRef, commonService?: IntegralUICommonService, cmpResolver?: ComponentFactoryResolver);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    ngAfterContentChecked(): void;
    private checkClone;
    clearSlides(): void;
    addSlide(slide: any): void;
    insertSlideAt(slide: any, index: number): void;
    insertSlideBefore(slide: any, refSlide: any): void;
    insertSlideAfter(slide: any, refSlide: any): void;
    removeSlide(slide: any): void;
    removeSlideAt(index: number): void;
    private callEventAdd;
    private callEventRemove;
    getButtonClass(button: any): "" | "iui-slidebar-navigator-button-selected";
    private getSlideCurrentIndex;
    private getSlideDataIndex;
    private getSlideData;
    private isIndexInRange;
    ctrlMouseEnter(e: any): void;
    ctrlMouseLeave(e: any): void;
    prevSlide(): void;
    nextSlide(): void;
    protected updateLayout(): void;
    private cancelAnimation;
    private changeSlide;
    private getSpeedFactor;
    private startAnimation;
    private stopAnimation;
    private selectSlide;
    selectSlideByIndex(index: number): void;
    getControlStyle(): any;
    static ɵfac: i0.ɵɵFactoryDef<IntegralUISlideBar, never>;
    static ɵcmp: i0.ɵɵComponentDefWithMeta<IntegralUISlideBar, "iui-slidebar", never, { "controlStyle": "controlStyle"; "data": "data"; "enabled": "enabled"; "name": "name"; "size": "size"; "state": "state"; "allowAnimation": "allowAnimation"; "animationPause": "animationPause"; "animationSpeed": "animationSpeed"; "navigationButtons": "navigationButtons"; "slides": "slides"; "selectedIndex": "selectedIndex"; "selectedSlide": "selectedSlide"; }, { "clear": "clear"; "slideAdding": "slideAdding"; "slideAdded": "slideAdded"; "slideChanged": "slideChanged"; "slideRemoving": "slideRemoving"; "slideRemoved": "slideRemoved"; }, ["contentSlideList"], ["*"]>;
}
