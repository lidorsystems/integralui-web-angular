import { ComponentFactoryResolver, ElementRef, EventEmitter, QueryList, ViewContainerRef } from '@angular/core';
import { IntegralUIBaseComponent, IntegralUIBaseService, IntegralUISpeedMode } from './integralui.core';
import { IntegralUICommonService } from '../services/integralui.common.service';
import { IntegralUIDataService } from '../services/integralui.data.service';
import { IntegralUIListGroup } from './integralui.listgroup';
import * as i0 from "@angular/core";
export declare class IntegralUIListBar extends IntegralUIBaseComponent {
    protected elemRef: ElementRef;
    protected dataService: IntegralUIDataService;
    protected commonService?: IntegralUICommonService;
    protected cmpResolver?: ComponentFactoryResolver;
    protected baseService?: IntegralUIBaseService;
    private numGroups;
    private blockMarginTop;
    scrollPos: any;
    maxScrollPos: any;
    buttonUpElem: ElementRef;
    buttonDownElem: ElementRef;
    contentRef: ViewContainerRef;
    contentElem: ElementRef;
    contentList: QueryList<IntegralUIListGroup>;
    private groupList;
    private groupEventList;
    initScrollPos: number;
    private isScrollActive;
    isScrollVisible: boolean;
    private scrollCount;
    private scrollTimer;
    private stopScrolling;
    private currentSelection;
    private currentSelectedIndex;
    private selectedComponent;
    private prevComponent;
    private removeIndex;
    private tRef;
    groups: Array<any>;
    mouseWheelSpeed: IntegralUISpeedMode;
    set selectedIndex(value: number);
    get selectedIndex(): number;
    set selectedGroup(value: any);
    get selectedGroup(): any;
    afterCollapse: EventEmitter<any>;
    afterExpand: EventEmitter<any>;
    afterSelect: EventEmitter<any>;
    beforeCollapse: EventEmitter<any>;
    beforeExpand: EventEmitter<any>;
    beforeSelect: EventEmitter<any>;
    groupAdding: EventEmitter<any>;
    groupAdded: EventEmitter<any>;
    clear: EventEmitter<any>;
    groupRemoving: EventEmitter<any>;
    groupRemoved: EventEmitter<any>;
    selectionChanged: EventEmitter<any>;
    constructor(elemRef: ElementRef, dataService: IntegralUIDataService, commonService?: IntegralUICommonService, cmpResolver?: ComponentFactoryResolver, baseService?: IntegralUIBaseService);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    ngAfterContentChecked(): void;
    clearGroups(): void;
    addGroup(group: any): void;
    insertGroupAt(group: any, index: number): void;
    insertGroupBefore(group: any, refGroup: any): void;
    insertGroupAfter(group: any, refGroup: any): void;
    removeGroup(group: any): void;
    removeGroupAt(index: number): void;
    private callEventAdd;
    private callEventRemove;
    private closeGroups;
    private toggleGroups;
    private getGroupCurrentIndex;
    private getGroupDataIndex;
    private getGroupData;
    private getGroupIndex;
    private getComponentData;
    invokeEvent(key: string, cmp: IntegralUIListGroup, skip?: boolean): boolean;
    invokeMethod(key: string, cmp: IntegralUIListGroup): boolean;
    private isIndexInRange;
    private attachGroupEvents;
    updateLayout(): void;
    scrollUpPressed(): void;
    scrollUpReleased(): void;
    scrollDownPressed(): void;
    scrollDownReleased(): void;
    startScroll(flag: boolean): void;
    stopScroll(): void;
    scrollTimerElapsed(flag: boolean): void;
    processScroll(flag: boolean): void;
    listMouseWheel(e: any): void;
    setScrollPos(value: any): void;
    private clearSelection;
    private selectComponent;
    private selectComponentByIndex;
    selectGroup(group: any): void;
    getControlStyle(): any;
    static ɵfac: i0.ɵɵFactoryDef<IntegralUIListBar, never>;
    static ɵcmp: i0.ɵɵComponentDefWithMeta<IntegralUIListBar, "iui-listbar", never, { "controlStyle": "controlStyle"; "data": "data"; "enabled": "enabled"; "name": "name"; "size": "size"; "state": "state"; "groups": "groups"; "mouseWheelSpeed": "mouseWheelSpeed"; "selectedIndex": "selectedIndex"; "selectedGroup": "selectedGroup"; }, { "afterCollapse": "afterCollapse"; "afterExpand": "afterExpand"; "afterSelect": "afterSelect"; "beforeCollapse": "beforeCollapse"; "beforeExpand": "beforeExpand"; "beforeSelect": "beforeSelect"; "groupAdding": "groupAdding"; "groupAdded": "groupAdded"; "clear": "clear"; "groupRemoving": "groupRemoving"; "groupRemoved": "groupRemoved"; "selectionChanged": "selectionChanged"; }, ["contentList"], ["*"]>;
}
